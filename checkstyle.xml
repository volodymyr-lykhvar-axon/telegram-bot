<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">
    <property name="charset" value="UTF-8"/>

    <property name="severity" value="error"/>

    <property name="fileExtensions" value="java, properties, xml"/>
    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <module name="SuppressWarningsFilter"/>

    <!--Detects duplicated keys in properties files.-->
    <module name="UniqueProperties"/>

    <!-- Checks for Size Violations.                    -->
    <!-- See http://checkstyle.sf.net/config_sizes.html -->
    <module name="FileLength"/>

    <!--Checks for long lines.-->
    <module name="LineLength">
        <property name="max" value="122"/>
        <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
    </module>

    <module name="TreeWalker">

        <!--Maintains a set of check suppressions from SuppressWarnings annotations.-->
        <module name="SuppressWarningsHolder"/>

        <!--Checks that the outer type name and the file name match.-->
        <module name="OuterTypeFilename"/>

        <!--Checks for illegal token text.-->
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format"
                      value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message"
                      value="Consider using special escape sequence instead of octal value or Unicode escaped value."/>
        </module>

        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <module name="JavadocType"/>
        <module name="JavadocStyle"/>

        <!--Restrict using Unicode escapes.-->
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true"/>
            <property name="allowByTailComment" value="true"/>
            <property name="allowNonPrintableEscapes" value="true"/>
        </module>

        <!--Checks for method length.-->
        <module name="MethodLength">
            <property name="max" value="80"/>
            <property name="countEmpty" value="false"/>
        </module>

        <!--Checks for params number-->
        <module name="ParameterNumber">
            <property name="max" value="9"/>
        </module>

        <module name="EmptyForIteratorPad"/>

        <!--Check that finds import statements that use the * notation.-->
        <module name="AvoidStarImport"/>

        <!-- Checks for illegal import statements. -->
        <!-- defaults to sun.* packages -->
        <module name="IllegalImport"/>

        <!-- Checks for redundant import statements. -->
        <module name="RedundantImport"/>

        <!--Checks for unused import statements.-->
        <module name="UnusedImports"/>

        <!--Checks that each top-level class, interfaces or enum resides in a source file of its own.-->
        <module name="OneTopLevelClass"/>

        <!--Checks that chosen statements are not line-wrapped.-->
        <module name="NoLineWrap"/>

        <!--Checks for empty blocks but does not validate sequential blocks.-->
        <module name="EmptyBlock">
            <property name="option" value="TEXT"/>
            <property name="tokens" value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
        </module>

        <!--Checks for braces around code blocks.-->
        <module name="NeedBraces"/>

        <!--Checks the placement of left curly braces on types, methods and other blocks:-->
        <module name="LeftCurly"/>

        <!--Checks the placement of right curly braces.-->
        <module name="RightCurly">
            <property name="id" value="RightCurlySame"/>
            <property name="tokens"
                      value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO"/>
        </module>

        <!--Checks the placement of right curly braces.-->
        <module name="RightCurly">
            <property name="id" value="RightCurlyAlone"/>
            <property name="option" value="alone"/>
            <property name="tokens"
                      value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT"/>
        </module>

        <!--Checks that a token is surrounded by whitespace.-->
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <message key="ws.notFollowed"
                     value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
            <message key="ws.notPreceded"
                     value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>

        <!--Checks that there is only one statement per line.-->
        <module name="OneStatementPerLine"/>

        <!--Checks that string literals are not used with == or !=.-->
        <module name="StringLiteralEquality"/>

        <!--Restricts nested boolean operators (&&, ||, &, | and ^) to a specified depth (default = 3).-->
        <module name="BooleanExpressionComplexity">
            <property name="max" value="6"/>
        </module>

        <!--Checks for empty catch blocks with few options to skip violation.-->
        <module name="EmptyCatchBlock"/>

        <!--Checks that classes that override equals() also override hashCode().-->
        <module name="EqualsHashCode"/>

        <!--Checks that class which has only private constructors is declared as final.-->
        <module name="FinalClass"/>

        <!--Checks that each variable declaration is in its own statement and on its own line.-->
        <module name="MultipleVariableDeclarations"/>

        <!--Checks the style of array type definitions.-->
        <module name="ArrayTypeStyle"/>

        <!--Checks for fall through in switch statements Finds locations where a case contains Java code - but lacks a break,
         return, throw or continue statement.-->
        <module name="FallThrough"/>

        <!--Checks that long constants are defined with an upper ell.-->
        <module name="UpperEll"/>

        <!--Checks that the order of modifiers conforms to the suggestions in the Java Language specification, sections 8.1.1, 8.3.1 and 8.4.3-->
        <module name="ModifierOrder"/>

        <!--Checks for blank line separators.-->
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
            <property name="allowMultipleEmptyLines" value="false"/>
            <property name="allowMultipleEmptyLinesInsideClassMembers" value="false"/>
        </module>

        <!--Checks line wrapping with separators.-->
        <module name="SeparatorWrap">
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>

        <!--Checks line wrapping with separators.-->
        <module name="SeparatorWrap">
            <property name="tokens" value="COMMA"/>
        </module>

        <!--Checks that package names conform to a format specified by the format property.-->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern"
                     value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!--Checks that method names conform to a format specified by the format property.-->
        <module name="MethodName">
            <property name="format" value="^[a-z]([a-zA-Z0-9])*$"/>
            <property name="allowClassName" value="true"/>
        </module>

        <!--Checks that type names conform to a format specified by the format property.-->
        <module name="TypeName">
            <message key="name.invalidPattern"
                     value="Type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!--Checks that constant names conform to a format specified by the format property.-->
        <module name="ConstantName"/>

        <!--Checks that local final variable names conform to a format specified by the format property.-->
        <module name="LocalFinalVariableName"/>

        <!--Checks that instance variable names conform to a format specified by the format property.-->
        <module name="MemberName">
            <property name="format" value="^[a-z_][a-z0-9_][a-zA-Z0-9_]*$"/>
            <message key="name.invalidPattern"
                     value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!--Checks that parameter names conform to a format specified by the format property.-->
        <module name="ParameterName">
            <property name="format" value="^[a-z_]([a-z0-9_][a-zA-Z0-9_]*)?$"/>
            <message key="name.invalidPattern"
                     value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!--Checks that catch parameter names conform to a format specified by the format property.-->
        <module name="CatchParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!--Checks that local, non-final variable names conform to a format specified by the format property.-->
        <module name="LocalVariableName">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!--Checks that class type parameter names conform to a format specified by the format property.-->
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!--Checks that class type parameter names conform to a format specified by the format property.-->
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!--Checks that interface type parameter names conform to a format specified by the format property.-->
        <module name="InterfaceTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Interface type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!--Checks that no method having zero parameters is defined using the name finalize.-->
        <module name="NoFinalizer"/>

        <!--Checks that the whitespace around the Generic tokens < and > are correct to the typical convention.-->
        <module name="GenericWhitespace">
            <message key="ws.followed"
                     value="GenericWhitespace ''{0}'' is followed by whitespace."/>
            <message key="ws.preceded"
                     value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
            <message key="ws.illegalFollow"
                     value="GenericWhitespace ''{0}'' should followed by whitespace."/>
            <message key="ws.notPreceded"
                     value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>

        <!--Checks correct indentation of Java Code.-->
        <module name="Indentation">
            <property name="basicOffset" value="4"/>
            <property name="braceAdjustment" value="0"/>
            <property name="caseIndent" value="4"/>
            <property name="throwsIndent" value="8"/>
            <property name="lineWrappingIndentation" value="8"/>
            <property name="arrayInitIndent" value="4"/>
        </module>

        <!--The Check validate abbreviations(consecutive capital letters) length in identifier name, it also allow in enforce camel case naming.-->
        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false"/>
            <property name="allowedAbbreviationLength" value="3"/>
        </module>

        <!--Checks that overload methods are grouped together.-->
        <module name="OverloadMethodsDeclarationOrder"/>

        <!--Checks the distance between declaration of variable and its first usage.-->
        <module name="VariableDeclarationUsageDistance">
            <property name="allowedDistance" value="15"/>
        </module>

        <!--Checks the padding between the identifier of a method definition, constructor definition, method call,
        or constructor invocation; and the left parenthesis of the parameter list.-->
        <module name="MethodParamPad"/>

        <!--Checks the padding of parentheses; that is whether a space is required after a left parenthesis and before a right parenthesis,
         or such spaces are forbidden, with the exception that it does not check for padding of the right parenthesis at an empty for iterator.-->
        <module name="ParenPad"/>

        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <module name="EmptyStatement"/>
        <module name="EqualsAvoidNull"/>

        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="NoWhitespaceAfter"/>

        <module name="NoWhitespaceBefore">
            <property name="tokens" value="DOT"/>
            <property name="allowLineBreaks" value="true"/>
        </module>

        <module name="TypecastParenPad"/>

        <module name="SingleSpaceSeparator">
            <property name="validateComments" value="true"/>
        </module>


        <!--Checks line wrapping for operators.-->
        <module name="OperatorWrap">
            <property name="option" value="EOL"/>
            <property name="tokens"
                      value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF "/>
        </module>

        <!--Check location of annotation on language elements.-->
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationMostCases"/>
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
        </module>

        <!--Check location of annotation on language elements.-->
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationVariables"/>
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>

        <!--Check the code for the absence of the following methods.-->
        <module name="Regexp">
            <property name="format" value="(System\.out\.println)|(printStackTrase)"/>
            <property name="illegalPattern" value="true"/>
        </module>

        <!--Check the order in which parts of the class or interface declaration are defined.-->
        <module name="DeclarationOrder"/>

        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <module name="MissingSwitchDefault"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <module name="HideUtilityClassConstructor"/>
        <module name="InterfaceIsType"/>

        <!-- Checks Javadoc Comments -->
        <module name="JavadocParagraph"/>
        <module name="SingleLineJavadoc"/>
    </module>
</module>